@name holostructurelib
@model models/bull/gates/microcontroller1.mdl
@persist HOLOSTRUCTURE_DATA:table HOLOSTRUCTURE_QUEUE:table HOLOSTRUCTURE_SPAWNED:table

#include "betterhololib"

#[                                                    ]#
##    E2 Library: holoStructureLib                    ##
##                                                    ##
##    Lets you easily define, create, and destroy     ##
##    groups of holograms called HoloStructures.      ##
##                                                    ##
##    Automatically included with any hologram        ##
##    structure generated by the VR Holo Designer.    ##
#[                                                    ]#

if( first() ){
    
    function supressInitializationWarnings(){
        HOLOSTRUCTURE_DATA = table() HOLOSTRUCTURE_QUEUE = table() HOLOSTRUCTURE_SPAWNED = table()
    }

    ###############
    ## 
    #   registerStructure( Class:string, StructureData:table )
    #     Registers a hologram structure with the given class.
    #
    #     StructureData details:
    #     | ["models",array]    -> hologram models
    #     | ["positions",array] -> local hologram positions
    #     | ["angles",array]    -> local hologram angles
    #     | ["scales",array]    -> hologram scales
    #     | ["colors",array]    -> hologram colors
    #     | ["materials",array] -> hologram materials
    #     |
    #     | OPTIONAL:
    #     | ["spawnChild",function] -> callback function for spawning child holos; the following are passed:
    #     | | HoloID:number -> the actual holo id
    #     | | Index:number  -> index of child on the template
    #   
    #     Spawn your structure class with holoStructCreate("class") !
    #
    function registerStructure(Class:string, StructureData:table){
        HOLOSTRUCTURE_DATA[Class,table] = StructureData
    }
    
    ###############
    ## 
    #   holoStructCreate( Class:string, Pos:vector = entity():pos() )
    #     Creates a HoloStructure of the specified class and queues it for spawning.
    #     Returns the ID of the created HoloStructure.
    #   
    function number holoStructCreate(Class:string,Pos:vector){
        if( !HOLOSTRUCTURE_DATA:exists(Class) ){
            error("Attempt to spawn unknown structure '"+Class+"'")
        }
        local Base = holoAlloc(Pos)
        holoAlpha(Base,0)
        HOLOSTRUCTURE_QUEUE[Base+"",table] = table(
            "template" = HOLOSTRUCTURE_DATA[Class,table],
            "progress" = 0,
            "children" = array(),
            "entity" = holoEntity(Base),
            "id" = Base
        )
        return Base
    }
    function number holoStructCreate(Class:string){
        return holoStructCreate(Class,entity():pos())
    }
    
    ###############
    ## 
    #   <HoloStructure>:holoStructFree( )
    #     Deletes a HoloStructure and all its children.
    # 
    function number:holoStructFree(){
        local ThisStr = This+""
        if( HOLOSTRUCTURE_SPAWNED:exists(ThisStr) ){ # probably already spawned
            local Holos = HOLOSTRUCTURE_SPAWNED[ThisStr,table]["children",array]
            foreach(_:number,ID:number=Holos){
                ID:holoFree()
            }
            HOLOSTRUCTURE_SPAWNED:remove(ThisStr)
        }
        elseif( HOLOSTRUCTURE_QUEUE:exists(ThisStr) ) { # check queue just in case
            local Holos = HOLOSTRUCTURE_QUEUE[ThisStr,table]["children",array]
            foreach(_:number,ID:number=Holos){
                ID:holoFree()
            }
        }
    }
    
    ###############
    ## 
    #   <HoloStructure>:getChildren( )
    #     Returns an array representing the holo ids of the children of this HoloStructure
    # 
    function array number:getChildren(){
        return HOLOSTRUCTURE_SPAWNED[This+"",table]["children",array]
    }
    
    if(entity():model() == "models/bull/gates/microcontroller1.mdl"){
        selfDestruct()
        error("This is a library; #include it in something.")
    }
    
}

event tick(){
    foreach(_:string, SpawnStruct:table = HOLOSTRUCTURE_QUEUE){
        
        if( !holoCanCreate() ){ break }
        if( opcounter() > softQuota() ){ break }
        
        N = SpawnStruct["id",number]
        
        local Template = SpawnStruct["template",table]
            local Models = Template["models",array]
            local Positions = Template["positions",array]
            local Angles = Template["angles",array]
            local Scales = Template["scales",array]
            local Colors = Template["colors",array]
            local Materials = Template["materials",array]
            local Max = Models:count()
        
        local Progress = SpawnStruct["progress",number]
        local BaseEntity = SpawnStruct["entity",entity]
        
        while( holoCanCreate() & (Progress < Max) ){
            if( opcounter() > softQuota() ){ break }
            Progress++
            local H = holoAlloc()
                holoModel(H,Models[Progress,string])
                holoPos(H,BaseEntity:toWorld(Positions[Progress,vector]))
                holoAng(H,BaseEntity:toWorld(Angles[Progress,angle]))
                holoScale(H,Scales[Progress,vector])
                holoColor(H,Colors[Progress,vector])
                holoMaterial(H,Materials[Progress,string])
                holoParent(H,N)
                if( Template:exists("spawnChild") ){
                    Template["spawnChild",function](H, Progress)
                }
            SpawnStruct["children",array]:pushNumber(H)
        }
        
        SpawnStruct["progress",number] = Progress
        
        if( Progress == Max ){ # done, move it out of the queue
            HOLOSTRUCTURE_SPAWNED[N+"",table] = HOLOSTRUCTURE_QUEUE:removeTable(N+"")
        }
        
    }
}
